{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"sMAGMA,G,MAAe,CACjBC,OAAS,CACLC,KAAO,sBACPC,SAAW,OAEfC,OAAS,CACLF,KAAO,kBACPC,SAAW,eAuBJE,EAXO,SAACC,GACrB,IATiBC,EAAKC,EAShBC,GATWF,EASQD,EAAMC,KATTC,GASc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEPP,EAAaS,GAA9BP,EAFwB,EAExBA,KAAKC,EAFmB,EAEnBA,SAEZ,OAAO,sBAAKS,UAAS,yBAAsBH,GAApC,UACH,mBAAGG,UAAS,UAAOT,EAAP,4BACZ,6BAAKD,IACL,mBAAGU,UAAS,UAAOT,EAAP,iCC3BZU,EAAU,SAACP,GACb,OACI,qBAAKM,UAAY,mBAAjB,SACI,qBAAKA,UAAY,qBAAjB,SACKN,EAAMQ,aAMvBD,EAAQE,aAAe,CACnBD,QAAU,cAGCD,QCPTG,E,4MASJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OAElBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GACC,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cAEvC,SAACC,GACC,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,sCAMtC,OAAIc,KAAKX,MAAMC,eAAiBU,KAAKX,MAAMV,IAClC,2CAAcqB,KAAKX,MAAMC,iBAE7BU,KAAKX,MAAMC,cAAgBU,KAAKX,MAAMV,IAClC,cAAC,EAAD,CAAeA,IAAKqB,KAAKX,MAAMV,MAEjC,cAAC,EAAD,CAASO,QAAU,qC,+BAI1B,OAAO,8BACJc,KAAKC,sB,GAnCMC,IAAMC,WAwCxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,cAAc,Y","file":"static/js/main.76a78aed.chunk.js","sourcesContent":["import './SeasonDisplay.css';\r\nimport React from \"react\";\r\n\r\nconst seasonConfig = {\r\n    summer : {\r\n        text : \"Let's hit the beach\",\r\n        iconName : 'sun'\r\n    },\r\n    winter : {\r\n        text : \"Burr! It's cold\",\r\n        iconName : 'snowflake'\r\n    }\r\n};\r\n\r\nconst getSeason = (lat, month) => {\r\n  if (month > 2 && month < 9) {\r\n    return lat > 0 ? \"summer\" : \"winter\";\r\n  } else {\r\n    return lat > 0 ? \"winter\" : \"summer\";\r\n  }\r\n};\r\n\r\nconst SeasonDisplay = (props) => {\r\n  const season = getSeason(props.lat, new Date().getMonth());\r\n  const {text,iconName} = seasonConfig[season];\r\n\r\n  return <div className = {`season-display ${season}`}>\r\n      <i className = {`${iconName} massive icon iconLeft`}/>\r\n      <h1>{text}</h1>\r\n      <i className = {`${iconName} massive icon iconRight`}/>\r\n      </div>;\r\n};\r\n\r\nexport default SeasonDisplay;\r\n","import React from 'react';\r\n\r\nconst Spinner = (props) =>{\r\n    return (\r\n        <div className = \"ui active dimmer\">\r\n            <div className = \"ui big text loader\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nSpinner.defaultProps = {\r\n    message : \"Loading...\"\r\n}\r\n\r\nexport default Spinner;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport SeasonDisplay from \"./SeasonDisplay\";\r\nimport Spinner from \"./Spinner\";\r\n\r\n// const App = () => {\r\n\r\n//   return <div>Hi There!</div>;\r\n// };\r\nclass App extends React.Component {\r\n  // constructor(props) {\r\n  //   super(props); //For the Component Class functionality and props\r\n\r\n  //   /* State Initialization during Component Creation */\r\n  //   this.state = { lat: null, errorMessage: \"\" };\r\n  // }\r\n\r\n  /* Another way of state initialisation except constructor */\r\n  state = { lat: null, errorMessage: \"\" };\r\n\r\n  componentDidMount() {\r\n    /* We need location just one time*/\r\n    window.navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        this.setState({ lat: position.coords.latitude });\r\n      },\r\n      (err) => {\r\n        this.setState({ errorMessage: err.message });\r\n      }\r\n    );\r\n  }\r\n\r\n  renderContent(){\r\n    if (this.state.errorMessage && !this.state.lat) {\r\n      return <div>Error : {this.state.errorMessage}</div>;\r\n    }\r\n    if (!this.state.errorMessage && this.state.lat) {\r\n      return <SeasonDisplay lat={this.state.lat} />;\r\n    }\r\n    return <Spinner message = \"Please Accept Location Request\"/>\r\n  }\r\n\r\n  render() {\r\n    return <div>\r\n      {this.renderContent()}\r\n    </div>\r\n  }\r\n}\r\n\r\nReactDOM.render(<App />, document.querySelector(\"#root\"));\r\n"],"sourceRoot":""}